class ConsoleFont(prototype):

        def __init__(self, font_file, font_size):
                pass
        
        def render(self, text, fgcolor=None) -> tuple[Surface, Rect]:
        

self.font_object = BitmapFont(font_file, font_size, font_color=None, )

Current settings - header footer input
        "font_type" : "TRUETYPE" / "BITMAP"
        "font_file" : "pygame_console/fonts/IBMPlexMono-Regular.ttf",
        "font_size" : 10,
        "font_antialias" : true,
        "font_color" : [255,255,255],
        "font_bck_color" : null,


''' Font and surface related params
*******************************
- surf ... basic surface of header, footer, input and output
- surf_dim ... dimension (Rect) of the basic surface 
- txt_surf ... surface to display text, applies padding to surface, cuts the text. It is transparent. and 
                it is blitted to the main surface
- txt_surf_dim ... dimension (Rect) of the text surface
- fnt_txt_surf ... surface for displaying front font text. It is being blitted to txt_surf in order to cut
                                        the text so it does not cross the console borders
- fnt_txt_surf_dim ... dimension (Rect) of the front font end surface
- fnt_bck_surf ... surface for displaying backgound of the font text. It is being blitted to txt_surf in order to cut
                                        the text so it does not cross the console borders
- fnt_bck_surf_dim ... dimensions (Rect) of the text background
''' 

pygame.freetype.init() 
self.font_object = pygame.freetype.Font(str(self.font_file), self.font_size)

# Get the height of the text font line and store it in line_spacing
# This is necessary so that the hight of the row spacing is not
# dynamicaly changing based on text height with TrueType fonts.
(_, rect_tmp) = self.font_object.render('|q', self.font_color, None )
self.line_spacing = rect_tmp.height

#####
# Create surface for text and store its dimensions
#####
(self.fnt_txt_surf, self.fnt_txt_surf_dim) = self.font_object.render(self.text, self.font_color, None)

#####
# Create surface for text background if needed
#####
if self.font_bck_color:
        self.fnt_bck_surf_dim = self.fnt_txt_surf_dim
        self.fnt_bck_surf = pygame.Surface((self.fnt_txt_surf_dim.width, self.line_spacing))
        self.fnt_bck_surf.fill(self.font_bck_color)

def update(self):
''' Called from console update function in order to generate the dynamic
text in the header and adjust the surface, if needed.
'''

# Only do something if dynamic params are needed. Otherwise, it is not necessary
if self.text_params:
        
        # prepare the dynamic text
        try:
                text = self.text.format(*[getattr(pack_method[0], pack_method[1])() for pack_method in self.text_params])				
        except AttributeError:
                text = f"Missing function in'{self.text_params}'"

        # generate the new text in self.text_surface object
        (self.fnt_txt_surf, self.fnt_txt_surf_dim) = self.font_object.render(text, self.font_color, None )

        # How many times the text for scrolling must be blitted to create the continuation effect
        if self.layout_name in ['SCROLL_LEFT_CONTINUOUS', 'SCROLL_RIGHT_CONTINUOUS']:
                self.scroll_repeats = (self.txt_surf_dim.width // self.fnt_txt_surf_dim.width) + 2
